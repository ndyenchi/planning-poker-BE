(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-copypaste', ['@angular/core','@angular/common','exports', '@angular/core', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.ng.common,global['ngx-copypaste'] = {}, global.ng.core, global.ng.common));
}(this, (function (ɵngcc0,ɵngcc1,exports, core, common) { 'use strict';

    var NgxCopyPasteDirective = /** @class */ (function () {
        function NgxCopyPasteDirective(_elementRef) {
            this._elementRef = _elementRef;
        }
        NgxCopyPasteDirective.prototype.copy = function () {
            var select = window.getSelection();
            if (select) {
                select.removeAllRanges();
            }
            var element = this._elementRef.nativeElement;
            if (element instanceof HTMLInputElement ||
                element instanceof HTMLTextAreaElement) {
                this._elementRef.nativeElement.select();
            }
            else {
                var range = document.createRange();
                range.selectNodeContents(this._elementRef.nativeElement);
                select = window.getSelection();
                if (select) {
                    select.addRange(range);
                }
            }
            document.execCommand('copy');
        };
NgxCopyPasteDirective.ɵfac = function NgxCopyPasteDirective_Factory(t) { return new (t || NgxCopyPasteDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
NgxCopyPasteDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgxCopyPasteDirective, selectors: [["", "ngxCopyPaste", ""]], exportAs: ["copy"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxCopyPasteDirective, [{
        type: core.Directive,
        args: [{
                selector: '[ngxCopyPaste]',
                exportAs: 'copy'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();
        return NgxCopyPasteDirective;
    }());
    NgxCopyPasteDirective.ctorParameters = function () { return [
        { type: core.ElementRef }
    ]; };

    var NgxCopyPasteModule = /** @class */ (function () {
        function NgxCopyPasteModule() {
        }
NgxCopyPasteModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxCopyPasteModule });
NgxCopyPasteModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxCopyPasteModule_Factory(t) { return new (t || NgxCopyPasteModule)(); }, imports: [[
            common.CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxCopyPasteModule, { declarations: [NgxCopyPasteDirective], imports: [ɵngcc1.CommonModule], exports: [NgxCopyPasteDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxCopyPasteModule, [{
        type: core.NgModule,
        args: [{
                declarations: [NgxCopyPasteDirective],
                imports: [
                    common.CommonModule
                ],
                exports: [NgxCopyPasteDirective]
            }]
    }], function () { return []; }, null); })();
        return NgxCopyPasteModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NgxCopyPasteDirective = NgxCopyPasteDirective;
    exports.NgxCopyPasteModule = NgxCopyPasteModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-copypaste.umd.js.map