import { Directive, ElementRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class NgxCopyPasteDirective {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
    copy() {
        let select = window.getSelection();
        if (select) {
            select.removeAllRanges();
        }
        const element = this._elementRef.nativeElement;
        if (element instanceof HTMLInputElement ||
            element instanceof HTMLTextAreaElement) {
            this._elementRef.nativeElement.select();
        }
        else {
            const range = document.createRange();
            range.selectNodeContents(this._elementRef.nativeElement);
            select = window.getSelection();
            if (select) {
                select.addRange(range);
            }
        }
        document.execCommand('copy');
    }
}
NgxCopyPasteDirective.ɵfac = function NgxCopyPasteDirective_Factory(t) { return new (t || NgxCopyPasteDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
NgxCopyPasteDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgxCopyPasteDirective, selectors: [["", "ngxCopyPaste", ""]], exportAs: ["copy"] });
NgxCopyPasteDirective.ctorParameters = () => [
    { type: ElementRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxCopyPasteDirective, [{
        type: Directive,
        args: [{
                selector: '[ngxCopyPaste]',
                exportAs: 'copy'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWNvcHlwYXN0ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2lnb3JuZXBpcGVua28vd29yay9vdGhlci9uZ3gtY29weXBhc3RlL3NyYy9hcHAvbmd4LWNvcHlwYXN0ZS9uZ3gtY29weXBhc3RlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFNdEQsTUFBTSxPQUFPLHFCQUFxQjtBQUNsQyxJQUFFLFlBQTJCLFdBQXVCO0FBQUksUUFBM0IsZ0JBQVcsR0FBWCxXQUFXLENBQVk7QUFBQyxJQUFFLENBQUM7QUFDeEQsSUFDUyxJQUFJO0FBQUssUUFDZCxJQUFJLE1BQU0sR0FBcUIsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ3pELFFBQUksSUFBSSxNQUFNLEVBQUU7QUFDaEIsWUFBTSxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDL0IsU0FBSztBQUNMLFFBQUksTUFBTSxPQUFPLEdBQWdCLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDO0FBQ2hFLFFBQUksSUFDRSxPQUFPLFlBQVksZ0JBQWdCO0FBQ3pDLFlBQU0sT0FBTyxZQUFZLG1CQUFtQixFQUN0QztBQUNOLFlBQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDOUMsU0FBSztBQUFDLGFBQUs7QUFDWCxZQUFNLE1BQU0sS0FBSyxHQUFVLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNsRCxZQUFNLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQy9ELFlBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUNyQyxZQUFNLElBQUksTUFBTSxFQUFFO0FBQ2xCLGdCQUFRLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDL0IsYUFBTztBQUNQLFNBQUs7QUFDTCxRQUFJLFFBQVEsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDakMsSUFBRSxDQUFDO0FBQ0g7aURBNUJDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsZ0JBQWdCLGtCQUMxQixRQUFRLEVBQUUsTUFBTSxjQUNqQjtrSkFDSTtBQUFDO0FBQ1UsWUFQSSxVQUFVO0FBQUc7Ozs7Ozs7MkVBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbmd4Q29weVBhc3RlXScsXG4gIGV4cG9ydEFzOiAnY29weSdcbn0pXG5leHBvcnQgY2xhc3MgTmd4Q29weVBhc3RlRGlyZWN0aXZlIHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHt9XG5cbiAgcHVibGljIGNvcHkoKTogdm9pZCB7XG4gICAgbGV0IHNlbGVjdDogU2VsZWN0aW9uIHwgbnVsbCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgICBpZiAoc2VsZWN0KSB7XG4gICAgICBzZWxlY3QucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgfVxuICAgIGNvbnN0IGVsZW1lbnQ6IEhUTUxFbGVtZW50ID0gdGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICAgIGlmIChcbiAgICAgIGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50IHx8XG4gICAgICBlbGVtZW50IGluc3RhbmNlb2YgSFRNTFRleHRBcmVhRWxlbWVudFxuICAgICkge1xuICAgICAgdGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnNlbGVjdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCByYW5nZTogUmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7XG4gICAgICBzZWxlY3QgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICBpZiAoc2VsZWN0KSB7XG4gICAgICAgIHNlbGVjdC5hZGRSYW5nZShyYW5nZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5Jyk7XG4gIH1cbn1cbiJdfQ==